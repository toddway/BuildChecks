apply plugin: 'com.toddway.buildchecks'

buildChecks {
    baseUrl = providers.systemProperty("baseUrl").forUseAtConfigurationTime().get()
    authorization = providers.systemProperty("auth").forUseAtConfigurationTime().get()
    buildUrl = providers.systemProperty("buildUrl").forUseAtConfigurationTime().get()
    reports = "$projectDir/build/reports"
    artifactsBranch = "artifacts"
    minCoveragePercent = 50
    maxLintViolations = 8
    maxDuration = 60
}


//this builds a list of changed files for use with known code analysis tools
def buildChangeLists() {
    if (!project.hasProperty("checkDiff")) return
    def baseBranch = project.getProperty("checkDiff") ?: ""
    def cmd = "git diff $baseBranch --name-only ${projectDir.name}/"
    def changeList = cmd.execute().text.readLines()
    project.ext.changeList = changeList
    println("checkDiff for $baseBranch: " + changeList)
    project.ext.checkstyleList = fileTree(dir: "$rootDir", includes:changeList.size == 0 ? [""] : changeList)
    project.ext.detektList = files(changeList.size == 0
            ? "$projectDir/src/main/res"
            : changeList.collect{ value -> "$rootDir/$value"})
    def cpdList = changeList.findAll{ it.contains("/src/main/java") || it.contains("/src/main/kotlin") }
    project.ext.cpdList = fileTree(dir: "$rootDir", includes: (cpdList.size == 0 ? [""] : cpdList))
    project.ext.jacocoList = changeList.size == 0
            ? ["**/IncludeNothing*"]
            : changeList.collect { value -> "**/${value.tokenize("/").last().tokenize(".").first()}*"}
}

buildChangeLists()

task printChangeLists {
    doLast {
        print("all: ")
        println(project.ext.changeList)
        print("checkstyle: ")
        println(project.ext.checkstyleList)
        print("detekt: ")
        println(project.ext.detektList)
        print("cpdList: ")
        println(project.ext.cpdList)
        print("jacocoList: ")
        println(project.ext.jacocoList)
    }
}
